{"version":3,"sources":["images/egg.png","images/friedegg.png","images/gameboard-i.svg","images/gameboard-a.svg","images/gameboard-o.svg","images/tictactoeBoard_lg.svg","components/Square.jsx","utils/helperFcns.js","components/Board.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledButton","styled","div","Square","props","egg","value","eggX","eggO","className","onClick","style","backgroundImage","checkWinner","arr","winCombos","i","length","a","b","c","checkBoard","count","forEach","el","StyledStatus","p","StyledBoard","StyledRow","Board","state","squares","Array","fill","history","isXNext","idx","squaresCopy","this","slice","isWinner","utils","isFull","setState","bgImg","handleClick","bg","status","winningPlayer","resetGame","require","renderSquare","Component","Game","App","src","gamelogoI","alt","gamelogoA","gamelogoO","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc043ce2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/egg.a7446f2c.png\";","module.exports = __webpack_public_path__ + \"static/media/friedegg.71050117.png\";","module.exports = __webpack_public_path__ + \"static/media/gameboard-i.f602537f.svg\";","module.exports = __webpack_public_path__ + \"static/media/gameboard-a.af9e876e.svg\";","module.exports = __webpack_public_path__ + \"static/media/gameboard-o.0ca1de6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/tictactoeBoard_lg.3c5ce6a6.svg\";","import React  from 'react'\nimport styled from 'styled-components'\nimport eggO from '../images/egg.png'\nimport eggX from '../images/friedegg.png'\n\nconst StyledButton = styled.div`\n    background-color: transparent;\n    background-size: contain;\n    height: 8em;\n    margin: 1em;\n    width: 8em;\n    position: relative;\n    border-radius: 15%;\n    border: none;\n    `\nfunction Square(props) {\n    \n    let egg;\n    if(props.value){\n       egg = props.value === \"X\" ? eggX : eggO;\n    }\n\n        return(\n            <StyledButton \n                className=\"game-square\" \n                onClick={props.onClick} value={props.value}\n                style={{\n                    backgroundImage: 'url('+egg+')',\n                         }}\n                >\n                \n            </StyledButton>\n        )\n    \n}\nexport default Square;\n","\n// iterate over array. array destr in each iteration. check for the el at all three indices are the same\nexport function checkWinner(arr){\n    // arr of arrs that are horiz, vert, diagonal winning combos, argh\n    const winCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n    for(let i = 0; i < winCombos.length; i++){\n        const[a, b, c] = winCombos[i]\n        if(arr[a] && arr[a]===arr[b] && arr[a]===arr[c]){\n            //return if the winner is X or O (the one in a)\n            return arr[a];\n        }\n    }\n    return null;\n}\nexport function checkBoard(arr){\n    let count = 0;\n    arr.forEach(el=>{\n        if(el !== null){\n            count ++;\n        }\n    });\n    if (count === 9){\n        return true;\n    } else {\n        return false;\n    }\n    \n}","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Square from './Square'\nimport * as utils from '../utils/helperFcns'\n\n\nconst StyledStatus = styled.p`\n    margin: 0.3em;\n    font-size: 1.5em;\n    letter-spacing: 3px;\n    display:inline-block;\n  \n`;\nconst StyledButton = styled.a`\n    border: 1px solid #044fd9;\n    text-decoration: none;\n    font-size: 1.5em;\n    color: #044fd9;\n    padding: 0.2em;\n    border-radius: 5px;\n    &:hover{\n        background: #044fd9;\n        color: #d9c704;\n    }\n`\nconst StyledBoard = styled.div`\n    display:inline-flex;\n    flex-direction:column;\n    flex:1;\n    align-items: center;\n    justify-content: center;\n    background-image:url('./../images/tictactoeBoard_lg.svg');\n    background-color: #044fd9;\n    background-repeat:no-repeat;\n    background-size: cover;\n`;\nconst StyledRow = styled.div`\n    display:flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nclass Board extends Component {\n    constructor(props){\n        super();\n        this.state ={\n            squares: Array(9).fill(null),\n            history:[],\n            isXNext: true\n        }\n        \n    }\n\n    handleClick(idx){\n        // copy squares arr\n        const squaresCopy = this.state.squares.slice();\n        // copy history\n        const history = this.state.history;\n        // check for winner or that the square has already been clicked:\n        const isWinner = utils.checkWinner(squaresCopy);\n        const isFull = utils.checkBoard(squaresCopy);\n        if( isWinner || squaresCopy[idx] || isFull){\n            return;\n        }\n        // set el of arr at the index to x or o\n        squaresCopy[idx]= this.state.isXNext ? \"X\" : \"O\";\n        this.setState({\n            squares: squaresCopy,\n            isXNext: !this.state.isXNext, \n            history: history\n        });\n        \n    }\n    resetGame(){\n        this.setState({\n            squares: Array(9).fill(null),\n            isXNext: true, \n            history: []\n        });\n    }\n    renderSquare(idx){\n        let bgImg;\n        if(this.state.squares[idx]){\n             bgImg = this.state.isXNext === \"X\" ? \"eggO\" : \"eggX\";\n        } else{\n             bgImg =''\n        }\n        return <Square \n            value={this.state.squares[idx]}\n            onClick={()=>this.handleClick(idx)}\n            bg={bgImg}\n             />\n    }\n    render() {\n     \n        const winningPlayer = utils.checkWinner(this.state.squares);\n        const isFull = utils.checkBoard(this.state.squares);\n        let status;\n        if(winningPlayer){\n            status = `Player ${winningPlayer} won!`\n        } else if(!winningPlayer && isFull){\n            status = \"It's a draw.\"\n        }\n        else{\n            status = `Player ${this.state.isXNext ? 'X' : 'O'}'s turn.`\n        }\n\n        return (\n            <div>\n                <div className=\"status-row\">\n                  <StyledStatus>{status}</StyledStatus> <StyledButton onClick={()=>this.resetGame()}>Reset</StyledButton> \n                </div>\n                <StyledBoard style={{\n                    backgroundImage: 'url(' + require('./../images/tictactoeBoard_lg.svg') + ')',\n                         }}>\n                     <StyledRow>\n                            {this.renderSquare(0)}\n                            {this.renderSquare(1)}\n                            {this.renderSquare(2)}\n                        </StyledRow> \n                        <StyledRow>\n                            {this.renderSquare(3)}\n                            {this.renderSquare(4)}\n                            {this.renderSquare(5)}\n                        </StyledRow> \n                        <StyledRow>\n                            {this.renderSquare(6)}\n                            {this.renderSquare(7)}\n                            {this.renderSquare(8)}\n                        </StyledRow>\n                </StyledBoard>\n            </div>\n        )\n    }\n}\nexport default Board;","import React, {Component} from 'react'\n// import {Storage} from './../storage/storage'\nimport Board from './Board'\n\n// https://blog.alexdevero.com/how-to-build-simple-tic-tac-toe-game-with-react/\n\n// https://github.com/kelanwu/react-tic-tac-toe/blob/master/src/index.js\n\n\nclass Game extends Component {\n \n\n    render(){\n        return(\n\n            <Board />        \n\n        )\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/Game'\nimport gamelogoI from './images/gameboard-i.svg';\nimport gamelogoA from './images/gameboard-a.svg';\nimport gamelogoO from './images/gameboard-o.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>T<img src={gamelogoI} className=\"App-logo\" alt=\"tictactoe board\" />cT<img src={gamelogoA} className=\"App-logo\" alt=\"tictactoe board\" />cT<img src={gamelogoO} className=\"App-logo\" alt=\"tictactoe board\" />e</h1>\n      </header>\n\n            <Game />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}